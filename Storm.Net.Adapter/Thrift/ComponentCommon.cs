/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ComponentCommon : TBase
{
  private int _parallelism_hint;
  private string _json_conf;

  public Dictionary<GlobalStreamId, Grouping> Inputs { get; set; }

  public Dictionary<string, StreamInfo> Streams { get; set; }

  public int Parallelism_hint
  {
    get
    {
      return _parallelism_hint;
    }
    set
    {
      __isset.parallelism_hint = true;
      this._parallelism_hint = value;
    }
  }

  public string Json_conf
  {
    get
    {
      return _json_conf;
    }
    set
    {
      __isset.json_conf = true;
      this._json_conf = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool parallelism_hint;
    public bool json_conf;
  }

  public ComponentCommon() {
  }

  public ComponentCommon(Dictionary<GlobalStreamId, Grouping> inputs, Dictionary<string, StreamInfo> streams) : this() {
    this.Inputs = inputs;
    this.Streams = streams;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_inputs = false;
    bool isset_streams = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Map) {
            {
              Inputs = new Dictionary<GlobalStreamId, Grouping>();
              TMap _map12 = iprot.ReadMapBegin();
              for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
              {
                GlobalStreamId _key14;
                Grouping _val15;
                _key14 = new GlobalStreamId();
                _key14.Read(iprot);
                _val15 = new Grouping();
                _val15.Read(iprot);
                Inputs[_key14] = _val15;
              }
              iprot.ReadMapEnd();
            }
            isset_inputs = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Map) {
            {
              Streams = new Dictionary<string, StreamInfo>();
              TMap _map16 = iprot.ReadMapBegin();
              for( int _i17 = 0; _i17 < _map16.Count; ++_i17)
              {
                string _key18;
                StreamInfo _val19;
                _key18 = iprot.ReadString();
                _val19 = new StreamInfo();
                _val19.Read(iprot);
                Streams[_key18] = _val19;
              }
              iprot.ReadMapEnd();
            }
            isset_streams = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            Parallelism_hint = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            Json_conf = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_inputs)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_streams)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ComponentCommon");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "inputs";
    field.Type = TType.Map;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Inputs.Count));
      foreach (GlobalStreamId _iter20 in Inputs.Keys)
      {
        _iter20.Write(oprot);
        Inputs[_iter20].Write(oprot);
      }
      oprot.WriteMapEnd();
    }
    oprot.WriteFieldEnd();
    field.Name = "streams";
    field.Type = TType.Map;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Streams.Count));
      foreach (string _iter21 in Streams.Keys)
      {
        oprot.WriteString(_iter21);
        Streams[_iter21].Write(oprot);
      }
      oprot.WriteMapEnd();
    }
    oprot.WriteFieldEnd();
    if (__isset.parallelism_hint) {
      field.Name = "parallelism_hint";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Parallelism_hint);
      oprot.WriteFieldEnd();
    }
    if (Json_conf != null && __isset.json_conf) {
      field.Name = "json_conf";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Json_conf);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ComponentCommon(");
    __sb.Append(", Inputs: ");
    __sb.Append(Inputs);
    __sb.Append(", Streams: ");
    __sb.Append(Streams);
    if (__isset.parallelism_hint) {
      __sb.Append(", Parallelism_hint: ");
      __sb.Append(Parallelism_hint);
    }
    if (Json_conf != null && __isset.json_conf) {
      __sb.Append(", Json_conf: ");
      __sb.Append(Json_conf);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

