#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class Assignment : TBase
{
  private Dictionary<string, string> _node_host;
  private Dictionary<List<long>, NodeInfo> _executor_node_port;
  private Dictionary<List<long>, long> _executor_start_time_secs;

  public string Master_code_dir { get; set; }

  public Dictionary<string, string> Node_host
  {
    get
    {
      return _node_host;
    }
    set
    {
      __isset.node_host = true;
      this._node_host = value;
    }
  }

  public Dictionary<List<long>, NodeInfo> Executor_node_port
  {
    get
    {
      return _executor_node_port;
    }
    set
    {
      __isset.executor_node_port = true;
      this._executor_node_port = value;
    }
  }

  public Dictionary<List<long>, long> Executor_start_time_secs
  {
    get
    {
      return _executor_start_time_secs;
    }
    set
    {
      __isset.executor_start_time_secs = true;
      this._executor_start_time_secs = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool node_host;
    public bool executor_node_port;
    public bool executor_start_time_secs;
  }

  public Assignment() {
    this._node_host = new Dictionary<string, string>();
    this.__isset.node_host = true;
    this._executor_node_port = new Dictionary<List<long>, NodeInfo>();
    this.__isset.executor_node_port = true;
    this._executor_start_time_secs = new Dictionary<List<long>, long>();
    this.__isset.executor_start_time_secs = true;
  }

  public Assignment(string master_code_dir) : this() {
    this.Master_code_dir = master_code_dir;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_master_code_dir = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Master_code_dir = iprot.ReadString();
            isset_master_code_dir = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Map) {
            {
              Node_host = new Dictionary<string, string>();
              TMap _map185 = iprot.ReadMapBegin();
              for( int _i186 = 0; _i186 < _map185.Count; ++_i186)
              {
                string _key187;
                string _val188;
                _key187 = iprot.ReadString();
                _val188 = iprot.ReadString();
                Node_host[_key187] = _val188;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Map) {
            {
              Executor_node_port = new Dictionary<List<long>, NodeInfo>();
              TMap _map189 = iprot.ReadMapBegin();
              for( int _i190 = 0; _i190 < _map189.Count; ++_i190)
              {
                List<long> _key191;
                NodeInfo _val192;
                {
                  _key191 = new List<long>();
                  TList _list193 = iprot.ReadListBegin();
                  for( int _i194 = 0; _i194 < _list193.Count; ++_i194)
                  {
                    long _elem195;
                    _elem195 = iprot.ReadI64();
                    _key191.Add(_elem195);
                  }
                  iprot.ReadListEnd();
                }
                _val192 = new NodeInfo();
                _val192.Read(iprot);
                Executor_node_port[_key191] = _val192;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Map) {
            {
              Executor_start_time_secs = new Dictionary<List<long>, long>();
              TMap _map196 = iprot.ReadMapBegin();
              for( int _i197 = 0; _i197 < _map196.Count; ++_i197)
              {
                List<long> _key198;
                long _val199;
                {
                  _key198 = new List<long>();
                  TList _list200 = iprot.ReadListBegin();
                  for( int _i201 = 0; _i201 < _list200.Count; ++_i201)
                  {
                    long _elem202;
                    _elem202 = iprot.ReadI64();
                    _key198.Add(_elem202);
                  }
                  iprot.ReadListEnd();
                }
                _val199 = iprot.ReadI64();
                Executor_start_time_secs[_key198] = _val199;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_master_code_dir)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("Assignment");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "master_code_dir";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Master_code_dir);
    oprot.WriteFieldEnd();
    if (Node_host != null && __isset.node_host) {
      field.Name = "node_host";
      field.Type = TType.Map;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Node_host.Count));
        foreach (string _iter203 in Node_host.Keys)
        {
          oprot.WriteString(_iter203);
          oprot.WriteString(Node_host[_iter203]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (Executor_node_port != null && __isset.executor_node_port) {
      field.Name = "executor_node_port";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.List, TType.Struct, Executor_node_port.Count));
        foreach (List<long> _iter204 in Executor_node_port.Keys)
        {
          {
            oprot.WriteListBegin(new TList(TType.I64, _iter204.Count));
            foreach (long _iter205 in _iter204)
            {
              oprot.WriteI64(_iter205);
            }
            oprot.WriteListEnd();
          }
          Executor_node_port[_iter204].Write(oprot);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (Executor_start_time_secs != null && __isset.executor_start_time_secs) {
      field.Name = "executor_start_time_secs";
      field.Type = TType.Map;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.List, TType.I64, Executor_start_time_secs.Count));
        foreach (List<long> _iter206 in Executor_start_time_secs.Keys)
        {
          {
            oprot.WriteListBegin(new TList(TType.I64, _iter206.Count));
            foreach (long _iter207 in _iter206)
            {
              oprot.WriteI64(_iter207);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteI64(Executor_start_time_secs[_iter206]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Assignment(");
    __sb.Append(", Master_code_dir: ");
    __sb.Append(Master_code_dir);
    if (Node_host != null && __isset.node_host) {
      __sb.Append(", Node_host: ");
      __sb.Append(Node_host);
    }
    if (Executor_node_port != null && __isset.executor_node_port) {
      __sb.Append(", Executor_node_port: ");
      __sb.Append(Executor_node_port);
    }
    if (Executor_start_time_secs != null && __isset.executor_start_time_secs) {
      __sb.Append(", Executor_start_time_secs: ");
      __sb.Append(Executor_start_time_secs);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif