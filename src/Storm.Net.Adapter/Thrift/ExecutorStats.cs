#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class ExecutorStats : TBase
{

  public Dictionary<string, Dictionary<string, long>> Emitted { get; set; }

  public Dictionary<string, Dictionary<string, long>> Transferred { get; set; }

  public ExecutorSpecificStats Specific { get; set; }

  public double Rate { get; set; }

  public ExecutorStats() {
  }

  public ExecutorStats(Dictionary<string, Dictionary<string, long>> emitted, Dictionary<string, Dictionary<string, long>> transferred, ExecutorSpecificStats specific, double rate) : this() {
    this.Emitted = emitted;
    this.Transferred = transferred;
    this.Specific = specific;
    this.Rate = rate;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_emitted = false;
    bool isset_transferred = false;
    bool isset_specific = false;
    bool isset_rate = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Map) {
            {
              Emitted = new Dictionary<string, Dictionary<string, long>>();
              TMap _map125 = iprot.ReadMapBegin();
              for( int _i126 = 0; _i126 < _map125.Count; ++_i126)
              {
                string _key127;
                Dictionary<string, long> _val128;
                _key127 = iprot.ReadString();
                {
                  _val128 = new Dictionary<string, long>();
                  TMap _map129 = iprot.ReadMapBegin();
                  for( int _i130 = 0; _i130 < _map129.Count; ++_i130)
                  {
                    string _key131;
                    long _val132;
                    _key131 = iprot.ReadString();
                    _val132 = iprot.ReadI64();
                    _val128[_key131] = _val132;
                  }
                  iprot.ReadMapEnd();
                }
                Emitted[_key127] = _val128;
              }
              iprot.ReadMapEnd();
            }
            isset_emitted = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Map) {
            {
              Transferred = new Dictionary<string, Dictionary<string, long>>();
              TMap _map133 = iprot.ReadMapBegin();
              for( int _i134 = 0; _i134 < _map133.Count; ++_i134)
              {
                string _key135;
                Dictionary<string, long> _val136;
                _key135 = iprot.ReadString();
                {
                  _val136 = new Dictionary<string, long>();
                  TMap _map137 = iprot.ReadMapBegin();
                  for( int _i138 = 0; _i138 < _map137.Count; ++_i138)
                  {
                    string _key139;
                    long _val140;
                    _key139 = iprot.ReadString();
                    _val140 = iprot.ReadI64();
                    _val136[_key139] = _val140;
                  }
                  iprot.ReadMapEnd();
                }
                Transferred[_key135] = _val136;
              }
              iprot.ReadMapEnd();
            }
            isset_transferred = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Struct) {
            Specific = new ExecutorSpecificStats();
            Specific.Read(iprot);
            isset_specific = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Double) {
            Rate = iprot.ReadDouble();
            isset_rate = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_emitted)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_transferred)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_specific)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_rate)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ExecutorStats");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "emitted";
    field.Type = TType.Map;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Emitted.Count));
      foreach (string _iter141 in Emitted.Keys)
      {
        oprot.WriteString(_iter141);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Emitted[_iter141].Count));
          foreach (string _iter142 in Emitted[_iter141].Keys)
          {
            oprot.WriteString(_iter142);
            oprot.WriteI64(Emitted[_iter141][_iter142]);
          }
          oprot.WriteMapEnd();
        }
      }
      oprot.WriteMapEnd();
    }
    oprot.WriteFieldEnd();
    field.Name = "transferred";
    field.Type = TType.Map;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Transferred.Count));
      foreach (string _iter143 in Transferred.Keys)
      {
        oprot.WriteString(_iter143);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Transferred[_iter143].Count));
          foreach (string _iter144 in Transferred[_iter143].Keys)
          {
            oprot.WriteString(_iter144);
            oprot.WriteI64(Transferred[_iter143][_iter144]);
          }
          oprot.WriteMapEnd();
        }
      }
      oprot.WriteMapEnd();
    }
    oprot.WriteFieldEnd();
    field.Name = "specific";
    field.Type = TType.Struct;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    Specific.Write(oprot);
    oprot.WriteFieldEnd();
    field.Name = "rate";
    field.Type = TType.Double;
    field.ID = 4;
    oprot.WriteFieldBegin(field);
    oprot.WriteDouble(Rate);
    oprot.WriteFieldEnd();
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ExecutorStats(");
    __sb.Append(", Emitted: ");
    __sb.Append(Emitted);
    __sb.Append(", Transferred: ");
    __sb.Append(Transferred);
    __sb.Append(", Specific: ");
    __sb.Append(Specific== null ? "<null>" : Specific.ToString());
    __sb.Append(", Rate: ");
    __sb.Append(Rate);
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif