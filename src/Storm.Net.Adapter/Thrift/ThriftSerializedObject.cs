#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class ThriftSerializedObject : TBase
{

  public string Name { get; set; }

  public byte[] Bits { get; set; }

  public ThriftSerializedObject() {
  }

  public ThriftSerializedObject(string name, byte[] bits) : this() {
    this.Name = name;
    this.Bits = bits;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_name = false;
    bool isset_bits = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Name = iprot.ReadString();
            isset_name = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Bits = iprot.ReadBinary();
            isset_bits = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_name)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_bits)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ThriftSerializedObject");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "name";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Name);
    oprot.WriteFieldEnd();
    field.Name = "bits";
    field.Type = TType.String;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteBinary(Bits);
    oprot.WriteFieldEnd();
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ThriftSerializedObject(");
    __sb.Append(", Name: ");
    __sb.Append(Name);
    __sb.Append(", Bits: ");
    __sb.Append(Bits);
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif