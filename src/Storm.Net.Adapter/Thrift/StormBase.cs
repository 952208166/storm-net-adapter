#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class StormBase : TBase
{
  private Dictionary<string, int> _component_executors;
  private int _launch_time_secs;
  private string _owner;
  private TopologyActionOptions _topology_action_options;
  private TopologyStatus _prev_status;

  public string Name { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="TopologyStatus"/>
  /// </summary>
  public TopologyStatus Status { get; set; }

  public int Num_workers { get; set; }

  public Dictionary<string, int> Component_executors
  {
    get
    {
      return _component_executors;
    }
    set
    {
      __isset.component_executors = true;
      this._component_executors = value;
    }
  }

  public int Launch_time_secs
  {
    get
    {
      return _launch_time_secs;
    }
    set
    {
      __isset.launch_time_secs = true;
      this._launch_time_secs = value;
    }
  }

  public string Owner
  {
    get
    {
      return _owner;
    }
    set
    {
      __isset.owner = true;
      this._owner = value;
    }
  }

  public TopologyActionOptions Topology_action_options
  {
    get
    {
      return _topology_action_options;
    }
    set
    {
      __isset.topology_action_options = true;
      this._topology_action_options = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="TopologyStatus"/>
  /// </summary>
  public TopologyStatus Prev_status
  {
    get
    {
      return _prev_status;
    }
    set
    {
      __isset.prev_status = true;
      this._prev_status = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool component_executors;
    public bool launch_time_secs;
    public bool owner;
    public bool topology_action_options;
    public bool prev_status;
  }

  public StormBase() {
  }

  public StormBase(string name, TopologyStatus status, int num_workers) : this() {
    this.Name = name;
    this.Status = status;
    this.Num_workers = num_workers;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_name = false;
    bool isset_status = false;
    bool isset_num_workers = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Name = iprot.ReadString();
            isset_name = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            Status = (TopologyStatus)iprot.ReadI32();
            isset_status = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            Num_workers = iprot.ReadI32();
            isset_num_workers = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Map) {
            {
              Component_executors = new Dictionary<string, int>();
              TMap _map208 = iprot.ReadMapBegin();
              for( int _i209 = 0; _i209 < _map208.Count; ++_i209)
              {
                string _key210;
                int _val211;
                _key210 = iprot.ReadString();
                _val211 = iprot.ReadI32();
                Component_executors[_key210] = _val211;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.I32) {
            Launch_time_secs = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.String) {
            Owner = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.Struct) {
            Topology_action_options = new TopologyActionOptions();
            Topology_action_options.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 8:
          if (field.Type == TType.I32) {
            Prev_status = (TopologyStatus)iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_name)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_status)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_workers)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("StormBase");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "name";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Name);
    oprot.WriteFieldEnd();
    field.Name = "status";
    field.Type = TType.I32;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32((int)Status);
    oprot.WriteFieldEnd();
    field.Name = "num_workers";
    field.Type = TType.I32;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_workers);
    oprot.WriteFieldEnd();
    if (Component_executors != null && __isset.component_executors) {
      field.Name = "component_executors";
      field.Type = TType.Map;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Component_executors.Count));
        foreach (string _iter212 in Component_executors.Keys)
        {
          oprot.WriteString(_iter212);
          oprot.WriteI32(Component_executors[_iter212]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (__isset.launch_time_secs) {
      field.Name = "launch_time_secs";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Launch_time_secs);
      oprot.WriteFieldEnd();
    }
    if (Owner != null && __isset.owner) {
      field.Name = "owner";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Owner);
      oprot.WriteFieldEnd();
    }
    if (Topology_action_options != null && __isset.topology_action_options) {
      field.Name = "topology_action_options";
      field.Type = TType.Struct;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      Topology_action_options.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (__isset.prev_status) {
      field.Name = "prev_status";
      field.Type = TType.I32;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Prev_status);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("StormBase(");
    __sb.Append(", Name: ");
    __sb.Append(Name);
    __sb.Append(", Status: ");
    __sb.Append(Status);
    __sb.Append(", Num_workers: ");
    __sb.Append(Num_workers);
    if (Component_executors != null && __isset.component_executors) {
      __sb.Append(", Component_executors: ");
      __sb.Append(Component_executors);
    }
    if (__isset.launch_time_secs) {
      __sb.Append(", Launch_time_secs: ");
      __sb.Append(Launch_time_secs);
    }
    if (Owner != null && __isset.owner) {
      __sb.Append(", Owner: ");
      __sb.Append(Owner);
    }
    if (Topology_action_options != null && __isset.topology_action_options) {
      __sb.Append(", Topology_action_options: ");
      __sb.Append(Topology_action_options== null ? "<null>" : Topology_action_options.ToString());
    }
    if (__isset.prev_status) {
      __sb.Append(", Prev_status: ");
      __sb.Append(Prev_status);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif