#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class SupervisorSummary : TBase
{
  private string _version;

  public string Host { get; set; }

  public int Uptime_secs { get; set; }

  public int Num_workers { get; set; }

  public int Num_used_workers { get; set; }

  public string Supervisor_id { get; set; }

  public string Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool version;
  }

  public SupervisorSummary() {
    this._version = "VERSION_NOT_PROVIDED";
    this.__isset.version = true;
  }

  public SupervisorSummary(string host, int uptime_secs, int num_workers, int num_used_workers, string supervisor_id) : this() {
    this.Host = host;
    this.Uptime_secs = uptime_secs;
    this.Num_workers = num_workers;
    this.Num_used_workers = num_used_workers;
    this.Supervisor_id = supervisor_id;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_host = false;
    bool isset_uptime_secs = false;
    bool isset_num_workers = false;
    bool isset_num_used_workers = false;
    bool isset_supervisor_id = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Host = iprot.ReadString();
            isset_host = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            Uptime_secs = iprot.ReadI32();
            isset_uptime_secs = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            Num_workers = iprot.ReadI32();
            isset_num_workers = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Num_used_workers = iprot.ReadI32();
            isset_num_used_workers = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            Supervisor_id = iprot.ReadString();
            isset_supervisor_id = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.String) {
            Version = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_host)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_uptime_secs)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_workers)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_used_workers)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_supervisor_id)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("SupervisorSummary");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "host";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Host);
    oprot.WriteFieldEnd();
    field.Name = "uptime_secs";
    field.Type = TType.I32;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Uptime_secs);
    oprot.WriteFieldEnd();
    field.Name = "num_workers";
    field.Type = TType.I32;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_workers);
    oprot.WriteFieldEnd();
    field.Name = "num_used_workers";
    field.Type = TType.I32;
    field.ID = 4;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_used_workers);
    oprot.WriteFieldEnd();
    field.Name = "supervisor_id";
    field.Type = TType.String;
    field.ID = 5;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Supervisor_id);
    oprot.WriteFieldEnd();
    if (Version != null && __isset.version) {
      field.Name = "version";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Version);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SupervisorSummary(");
    __sb.Append(", Host: ");
    __sb.Append(Host);
    __sb.Append(", Uptime_secs: ");
    __sb.Append(Uptime_secs);
    __sb.Append(", Num_workers: ");
    __sb.Append(Num_workers);
    __sb.Append(", Num_used_workers: ");
    __sb.Append(Num_used_workers);
    __sb.Append(", Supervisor_id: ");
    __sb.Append(Supervisor_id);
    if (Version != null && __isset.version) {
      __sb.Append(", Version: ");
      __sb.Append(Version);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif