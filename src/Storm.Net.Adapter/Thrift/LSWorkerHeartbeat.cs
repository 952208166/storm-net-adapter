#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class LSWorkerHeartbeat : TBase
{

  public int Time_secs { get; set; }

  public string Topology_id { get; set; }

  public List<ExecutorInfo> Executors { get; set; }

  public int Port { get; set; }

  public LSWorkerHeartbeat() {
  }

  public LSWorkerHeartbeat(int time_secs, string topology_id, List<ExecutorInfo> executors, int port) : this() {
    this.Time_secs = time_secs;
    this.Topology_id = topology_id;
    this.Executors = executors;
    this.Port = port;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_time_secs = false;
    bool isset_topology_id = false;
    bool isset_executors = false;
    bool isset_port = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            Time_secs = iprot.ReadI32();
            isset_time_secs = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Topology_id = iprot.ReadString();
            isset_topology_id = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.List) {
            {
              Executors = new List<ExecutorInfo>();
              TList _list237 = iprot.ReadListBegin();
              for( int _i238 = 0; _i238 < _list237.Count; ++_i238)
              {
                ExecutorInfo _elem239;
                _elem239 = new ExecutorInfo();
                _elem239.Read(iprot);
                Executors.Add(_elem239);
              }
              iprot.ReadListEnd();
            }
            isset_executors = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Port = iprot.ReadI32();
            isset_port = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_time_secs)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_topology_id)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_executors)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_port)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("LSWorkerHeartbeat");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "time_secs";
    field.Type = TType.I32;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Time_secs);
    oprot.WriteFieldEnd();
    field.Name = "topology_id";
    field.Type = TType.String;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Topology_id);
    oprot.WriteFieldEnd();
    field.Name = "executors";
    field.Type = TType.List;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteListBegin(new TList(TType.Struct, Executors.Count));
      foreach (ExecutorInfo _iter240 in Executors)
      {
        _iter240.Write(oprot);
      }
      oprot.WriteListEnd();
    }
    oprot.WriteFieldEnd();
    field.Name = "port";
    field.Type = TType.I32;
    field.ID = 4;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Port);
    oprot.WriteFieldEnd();
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LSWorkerHeartbeat(");
    __sb.Append(", Time_secs: ");
    __sb.Append(Time_secs);
    __sb.Append(", Topology_id: ");
    __sb.Append(Topology_id);
    __sb.Append(", Executors: ");
    __sb.Append(Executors);
    __sb.Append(", Port: ");
    __sb.Append(Port);
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif