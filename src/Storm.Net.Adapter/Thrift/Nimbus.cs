/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class Nimbus {
  public interface Iface {
    void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology);
    #if SILVERLIGHT
    IAsyncResult Begin_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology);
    void End_submitTopology(IAsyncResult asyncResult);
    #endif
    void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options);
    void End_submitTopologyWithOpts(IAsyncResult asyncResult);
    #endif
    void killTopology(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_killTopology(AsyncCallback callback, object state, string name);
    void End_killTopology(IAsyncResult asyncResult);
    #endif
    void killTopologyWithOpts(string name, KillOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options);
    void End_killTopologyWithOpts(IAsyncResult asyncResult);
    #endif
    void activate(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_activate(AsyncCallback callback, object state, string name);
    void End_activate(IAsyncResult asyncResult);
    #endif
    void deactivate(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_deactivate(AsyncCallback callback, object state, string name);
    void End_deactivate(IAsyncResult asyncResult);
    #endif
    void rebalance(string name, RebalanceOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options);
    void End_rebalance(IAsyncResult asyncResult);
    #endif
    void uploadNewCredentials(string name, Credentials creds);
    #if SILVERLIGHT
    IAsyncResult Begin_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds);
    void End_uploadNewCredentials(IAsyncResult asyncResult);
    #endif
    string beginFileUpload();
    #if SILVERLIGHT
    IAsyncResult Begin_beginFileUpload(AsyncCallback callback, object state);
    string End_beginFileUpload(IAsyncResult asyncResult);
    #endif
    void uploadChunk(string location, byte[] chunk);
    #if SILVERLIGHT
    IAsyncResult Begin_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk);
    void End_uploadChunk(IAsyncResult asyncResult);
    #endif
    void finishFileUpload(string location);
    #if SILVERLIGHT
    IAsyncResult Begin_finishFileUpload(AsyncCallback callback, object state, string location);
    void End_finishFileUpload(IAsyncResult asyncResult);
    #endif
    string beginFileDownload(string file);
    #if SILVERLIGHT
    IAsyncResult Begin_beginFileDownload(AsyncCallback callback, object state, string file);
    string End_beginFileDownload(IAsyncResult asyncResult);
    #endif
    byte[] downloadChunk(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_downloadChunk(AsyncCallback callback, object state, string id);
    byte[] End_downloadChunk(IAsyncResult asyncResult);
    #endif
    string getNimbusConf();
    #if SILVERLIGHT
    IAsyncResult Begin_getNimbusConf(AsyncCallback callback, object state);
    string End_getNimbusConf(IAsyncResult asyncResult);
    #endif
    ClusterSummary getClusterInfo();
    #if SILVERLIGHT
    IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state);
    ClusterSummary End_getClusterInfo(IAsyncResult asyncResult);
    #endif
    TopologyInfo getTopologyInfo(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_getTopologyInfo(AsyncCallback callback, object state, string id);
    TopologyInfo End_getTopologyInfo(IAsyncResult asyncResult);
    #endif
    TopologyInfo getTopologyInfoWithOpts(string id, GetInfoOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options);
    TopologyInfo End_getTopologyInfoWithOpts(IAsyncResult asyncResult);
    #endif
    string getTopologyConf(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_getTopologyConf(AsyncCallback callback, object state, string id);
    string End_getTopologyConf(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
    /// </summary>
    /// <param name="id"></param>
    StormTopology getTopology(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_getTopology(AsyncCallback callback, object state, string id);
    StormTopology End_getTopology(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
    /// </summary>
    /// <param name="id"></param>
    StormTopology getUserTopology(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_getUserTopology(AsyncCallback callback, object state, string id);
    StormTopology End_getUserTopology(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
    {
      return send_submitTopology(callback, state, name, uploadedJarLocation, jsonConf, topology);
    }

    public void End_submitTopology(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_submitTopology();
    }

    #endif

    public void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
    {
      #if !SILVERLIGHT
      send_submitTopology(name, uploadedJarLocation, jsonConf, topology);
      recv_submitTopology();

      #else
      var asyncResult = Begin_submitTopology(null, null, name, uploadedJarLocation, jsonConf, topology);
      End_submitTopology(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
    #else
    public void send_submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("submitTopology", TMessageType.Call, seqid_));
      submitTopology_args args = new submitTopology_args();
      args.Name = name;
      args.UploadedJarLocation = uploadedJarLocation;
      args.JsonConf = jsonConf;
      args.Topology = topology;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_submitTopology()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      submitTopology_result result = new submitTopology_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ite) {
        throw result.Ite;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
    {
      return send_submitTopologyWithOpts(callback, state, name, uploadedJarLocation, jsonConf, topology, options);
    }

    public void End_submitTopologyWithOpts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_submitTopologyWithOpts();
    }

    #endif

    public void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
    {
      #if !SILVERLIGHT
      send_submitTopologyWithOpts(name, uploadedJarLocation, jsonConf, topology, options);
      recv_submitTopologyWithOpts();

      #else
      var asyncResult = Begin_submitTopologyWithOpts(null, null, name, uploadedJarLocation, jsonConf, topology, options);
      End_submitTopologyWithOpts(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
    #else
    public void send_submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("submitTopologyWithOpts", TMessageType.Call, seqid_));
      submitTopologyWithOpts_args args = new submitTopologyWithOpts_args();
      args.Name = name;
      args.UploadedJarLocation = uploadedJarLocation;
      args.JsonConf = jsonConf;
      args.Topology = topology;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_submitTopologyWithOpts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      submitTopologyWithOpts_result result = new submitTopologyWithOpts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ite) {
        throw result.Ite;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_killTopology(AsyncCallback callback, object state, string name)
    {
      return send_killTopology(callback, state, name);
    }

    public void End_killTopology(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_killTopology();
    }

    #endif

    public void killTopology(string name)
    {
      #if !SILVERLIGHT
      send_killTopology(name);
      recv_killTopology();

      #else
      var asyncResult = Begin_killTopology(null, null, name);
      End_killTopology(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_killTopology(AsyncCallback callback, object state, string name)
    #else
    public void send_killTopology(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("killTopology", TMessageType.Call, seqid_));
      killTopology_args args = new killTopology_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_killTopology()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      killTopology_result result = new killTopology_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options)
    {
      return send_killTopologyWithOpts(callback, state, name, options);
    }

    public void End_killTopologyWithOpts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_killTopologyWithOpts();
    }

    #endif

    public void killTopologyWithOpts(string name, KillOptions options)
    {
      #if !SILVERLIGHT
      send_killTopologyWithOpts(name, options);
      recv_killTopologyWithOpts();

      #else
      var asyncResult = Begin_killTopologyWithOpts(null, null, name, options);
      End_killTopologyWithOpts(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options)
    #else
    public void send_killTopologyWithOpts(string name, KillOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("killTopologyWithOpts", TMessageType.Call, seqid_));
      killTopologyWithOpts_args args = new killTopologyWithOpts_args();
      args.Name = name;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_killTopologyWithOpts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      killTopologyWithOpts_result result = new killTopologyWithOpts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_activate(AsyncCallback callback, object state, string name)
    {
      return send_activate(callback, state, name);
    }

    public void End_activate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_activate();
    }

    #endif

    public void activate(string name)
    {
      #if !SILVERLIGHT
      send_activate(name);
      recv_activate();

      #else
      var asyncResult = Begin_activate(null, null, name);
      End_activate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_activate(AsyncCallback callback, object state, string name)
    #else
    public void send_activate(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("activate", TMessageType.Call, seqid_));
      activate_args args = new activate_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_activate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      activate_result result = new activate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deactivate(AsyncCallback callback, object state, string name)
    {
      return send_deactivate(callback, state, name);
    }

    public void End_deactivate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deactivate();
    }

    #endif

    public void deactivate(string name)
    {
      #if !SILVERLIGHT
      send_deactivate(name);
      recv_deactivate();

      #else
      var asyncResult = Begin_deactivate(null, null, name);
      End_deactivate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deactivate(AsyncCallback callback, object state, string name)
    #else
    public void send_deactivate(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deactivate", TMessageType.Call, seqid_));
      deactivate_args args = new deactivate_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deactivate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deactivate_result result = new deactivate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options)
    {
      return send_rebalance(callback, state, name, options);
    }

    public void End_rebalance(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_rebalance();
    }

    #endif

    public void rebalance(string name, RebalanceOptions options)
    {
      #if !SILVERLIGHT
      send_rebalance(name, options);
      recv_rebalance();

      #else
      var asyncResult = Begin_rebalance(null, null, name, options);
      End_rebalance(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options)
    #else
    public void send_rebalance(string name, RebalanceOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("rebalance", TMessageType.Call, seqid_));
      rebalance_args args = new rebalance_args();
      args.Name = name;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_rebalance()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rebalance_result result = new rebalance_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ite) {
        throw result.Ite;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds)
    {
      return send_uploadNewCredentials(callback, state, name, creds);
    }

    public void End_uploadNewCredentials(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_uploadNewCredentials();
    }

    #endif

    public void uploadNewCredentials(string name, Credentials creds)
    {
      #if !SILVERLIGHT
      send_uploadNewCredentials(name, creds);
      recv_uploadNewCredentials();

      #else
      var asyncResult = Begin_uploadNewCredentials(null, null, name, creds);
      End_uploadNewCredentials(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds)
    #else
    public void send_uploadNewCredentials(string name, Credentials creds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("uploadNewCredentials", TMessageType.Call, seqid_));
      uploadNewCredentials_args args = new uploadNewCredentials_args();
      args.Name = name;
      args.Creds = creds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_uploadNewCredentials()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      uploadNewCredentials_result result = new uploadNewCredentials_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ite) {
        throw result.Ite;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_beginFileUpload(AsyncCallback callback, object state)
    {
      return send_beginFileUpload(callback, state);
    }

    public string End_beginFileUpload(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_beginFileUpload();
    }

    #endif

    public string beginFileUpload()
    {
      #if !SILVERLIGHT
      send_beginFileUpload();
      return recv_beginFileUpload();

      #else
      var asyncResult = Begin_beginFileUpload(null, null);
      return End_beginFileUpload(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_beginFileUpload(AsyncCallback callback, object state)
    #else
    public void send_beginFileUpload()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("beginFileUpload", TMessageType.Call, seqid_));
      beginFileUpload_args args = new beginFileUpload_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_beginFileUpload()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      beginFileUpload_result result = new beginFileUpload_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileUpload failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk)
    {
      return send_uploadChunk(callback, state, location, chunk);
    }

    public void End_uploadChunk(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_uploadChunk();
    }

    #endif

    public void uploadChunk(string location, byte[] chunk)
    {
      #if !SILVERLIGHT
      send_uploadChunk(location, chunk);
      recv_uploadChunk();

      #else
      var asyncResult = Begin_uploadChunk(null, null, location, chunk);
      End_uploadChunk(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk)
    #else
    public void send_uploadChunk(string location, byte[] chunk)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("uploadChunk", TMessageType.Call, seqid_));
      uploadChunk_args args = new uploadChunk_args();
      args.Location = location;
      args.Chunk = chunk;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_uploadChunk()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      uploadChunk_result result = new uploadChunk_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_finishFileUpload(AsyncCallback callback, object state, string location)
    {
      return send_finishFileUpload(callback, state, location);
    }

    public void End_finishFileUpload(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_finishFileUpload();
    }

    #endif

    public void finishFileUpload(string location)
    {
      #if !SILVERLIGHT
      send_finishFileUpload(location);
      recv_finishFileUpload();

      #else
      var asyncResult = Begin_finishFileUpload(null, null, location);
      End_finishFileUpload(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_finishFileUpload(AsyncCallback callback, object state, string location)
    #else
    public void send_finishFileUpload(string location)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("finishFileUpload", TMessageType.Call, seqid_));
      finishFileUpload_args args = new finishFileUpload_args();
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_finishFileUpload()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      finishFileUpload_result result = new finishFileUpload_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.aze) {
        throw result.Aze;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_beginFileDownload(AsyncCallback callback, object state, string file)
    {
      return send_beginFileDownload(callback, state, file);
    }

    public string End_beginFileDownload(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_beginFileDownload();
    }

    #endif

    public string beginFileDownload(string file)
    {
      #if !SILVERLIGHT
      send_beginFileDownload(file);
      return recv_beginFileDownload();

      #else
      var asyncResult = Begin_beginFileDownload(null, null, file);
      return End_beginFileDownload(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_beginFileDownload(AsyncCallback callback, object state, string file)
    #else
    public void send_beginFileDownload(string file)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("beginFileDownload", TMessageType.Call, seqid_));
      beginFileDownload_args args = new beginFileDownload_args();
      args.File = file;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_beginFileDownload()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      beginFileDownload_result result = new beginFileDownload_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileDownload failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_downloadChunk(AsyncCallback callback, object state, string id)
    {
      return send_downloadChunk(callback, state, id);
    }

    public byte[] End_downloadChunk(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_downloadChunk();
    }

    #endif

    public byte[] downloadChunk(string id)
    {
      #if !SILVERLIGHT
      send_downloadChunk(id);
      return recv_downloadChunk();

      #else
      var asyncResult = Begin_downloadChunk(null, null, id);
      return End_downloadChunk(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_downloadChunk(AsyncCallback callback, object state, string id)
    #else
    public void send_downloadChunk(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("downloadChunk", TMessageType.Call, seqid_));
      downloadChunk_args args = new downloadChunk_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public byte[] recv_downloadChunk()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      downloadChunk_result result = new downloadChunk_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadChunk failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getNimbusConf(AsyncCallback callback, object state)
    {
      return send_getNimbusConf(callback, state);
    }

    public string End_getNimbusConf(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNimbusConf();
    }

    #endif

    public string getNimbusConf()
    {
      #if !SILVERLIGHT
      send_getNimbusConf();
      return recv_getNimbusConf();

      #else
      var asyncResult = Begin_getNimbusConf(null, null);
      return End_getNimbusConf(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNimbusConf(AsyncCallback callback, object state)
    #else
    public void send_getNimbusConf()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getNimbusConf", TMessageType.Call, seqid_));
      getNimbusConf_args args = new getNimbusConf_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getNimbusConf()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNimbusConf_result result = new getNimbusConf_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNimbusConf failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state)
    {
      return send_getClusterInfo(callback, state);
    }

    public ClusterSummary End_getClusterInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getClusterInfo();
    }

    #endif

    public ClusterSummary getClusterInfo()
    {
      #if !SILVERLIGHT
      send_getClusterInfo();
      return recv_getClusterInfo();

      #else
      var asyncResult = Begin_getClusterInfo(null, null);
      return End_getClusterInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getClusterInfo(AsyncCallback callback, object state)
    #else
    public void send_getClusterInfo()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Call, seqid_));
      getClusterInfo_args args = new getClusterInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ClusterSummary recv_getClusterInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getClusterInfo_result result = new getClusterInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTopologyInfo(AsyncCallback callback, object state, string id)
    {
      return send_getTopologyInfo(callback, state, id);
    }

    public TopologyInfo End_getTopologyInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTopologyInfo();
    }

    #endif

    public TopologyInfo getTopologyInfo(string id)
    {
      #if !SILVERLIGHT
      send_getTopologyInfo(id);
      return recv_getTopologyInfo();

      #else
      var asyncResult = Begin_getTopologyInfo(null, null, id);
      return End_getTopologyInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTopologyInfo(AsyncCallback callback, object state, string id)
    #else
    public void send_getTopologyInfo(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTopologyInfo", TMessageType.Call, seqid_));
      getTopologyInfo_args args = new getTopologyInfo_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TopologyInfo recv_getTopologyInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTopologyInfo_result result = new getTopologyInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options)
    {
      return send_getTopologyInfoWithOpts(callback, state, id, options);
    }

    public TopologyInfo End_getTopologyInfoWithOpts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTopologyInfoWithOpts();
    }

    #endif

    public TopologyInfo getTopologyInfoWithOpts(string id, GetInfoOptions options)
    {
      #if !SILVERLIGHT
      send_getTopologyInfoWithOpts(id, options);
      return recv_getTopologyInfoWithOpts();

      #else
      var asyncResult = Begin_getTopologyInfoWithOpts(null, null, id, options);
      return End_getTopologyInfoWithOpts(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options)
    #else
    public void send_getTopologyInfoWithOpts(string id, GetInfoOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTopologyInfoWithOpts", TMessageType.Call, seqid_));
      getTopologyInfoWithOpts_args args = new getTopologyInfoWithOpts_args();
      args.Id = id;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TopologyInfo recv_getTopologyInfoWithOpts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTopologyInfoWithOpts_result result = new getTopologyInfoWithOpts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfoWithOpts failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTopologyConf(AsyncCallback callback, object state, string id)
    {
      return send_getTopologyConf(callback, state, id);
    }

    public string End_getTopologyConf(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTopologyConf();
    }

    #endif

    public string getTopologyConf(string id)
    {
      #if !SILVERLIGHT
      send_getTopologyConf(id);
      return recv_getTopologyConf();

      #else
      var asyncResult = Begin_getTopologyConf(null, null, id);
      return End_getTopologyConf(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTopologyConf(AsyncCallback callback, object state, string id)
    #else
    public void send_getTopologyConf(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTopologyConf", TMessageType.Call, seqid_));
      getTopologyConf_args args = new getTopologyConf_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getTopologyConf()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTopologyConf_result result = new getTopologyConf_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyConf failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTopology(AsyncCallback callback, object state, string id)
    {
      return send_getTopology(callback, state, id);
    }

    public StormTopology End_getTopology(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTopology();
    }

    #endif

    /// <summary>
    /// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
    /// </summary>
    /// <param name="id"></param>
    public StormTopology getTopology(string id)
    {
      #if !SILVERLIGHT
      send_getTopology(id);
      return recv_getTopology();

      #else
      var asyncResult = Begin_getTopology(null, null, id);
      return End_getTopology(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTopology(AsyncCallback callback, object state, string id)
    #else
    public void send_getTopology(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTopology", TMessageType.Call, seqid_));
      getTopology_args args = new getTopology_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public StormTopology recv_getTopology()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTopology_result result = new getTopology_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopology failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getUserTopology(AsyncCallback callback, object state, string id)
    {
      return send_getUserTopology(callback, state, id);
    }

    public StormTopology End_getUserTopology(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserTopology();
    }

    #endif

    /// <summary>
    /// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
    /// </summary>
    /// <param name="id"></param>
    public StormTopology getUserTopology(string id)
    {
      #if !SILVERLIGHT
      send_getUserTopology(id);
      return recv_getUserTopology();

      #else
      var asyncResult = Begin_getUserTopology(null, null, id);
      return End_getUserTopology(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserTopology(AsyncCallback callback, object state, string id)
    #else
    public void send_getUserTopology(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getUserTopology", TMessageType.Call, seqid_));
      getUserTopology_args args = new getUserTopology_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public StormTopology recv_getUserTopology()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserTopology_result result = new getUserTopology_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.aze) {
        throw result.Aze;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTopology failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["submitTopology"] = submitTopology_Process;
      processMap_["submitTopologyWithOpts"] = submitTopologyWithOpts_Process;
      processMap_["killTopology"] = killTopology_Process;
      processMap_["killTopologyWithOpts"] = killTopologyWithOpts_Process;
      processMap_["activate"] = activate_Process;
      processMap_["deactivate"] = deactivate_Process;
      processMap_["rebalance"] = rebalance_Process;
      processMap_["uploadNewCredentials"] = uploadNewCredentials_Process;
      processMap_["beginFileUpload"] = beginFileUpload_Process;
      processMap_["uploadChunk"] = uploadChunk_Process;
      processMap_["finishFileUpload"] = finishFileUpload_Process;
      processMap_["beginFileDownload"] = beginFileDownload_Process;
      processMap_["downloadChunk"] = downloadChunk_Process;
      processMap_["getNimbusConf"] = getNimbusConf_Process;
      processMap_["getClusterInfo"] = getClusterInfo_Process;
      processMap_["getTopologyInfo"] = getTopologyInfo_Process;
      processMap_["getTopologyInfoWithOpts"] = getTopologyInfoWithOpts_Process;
      processMap_["getTopologyConf"] = getTopologyConf_Process;
      processMap_["getTopology"] = getTopology_Process;
      processMap_["getUserTopology"] = getUserTopology_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void submitTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      submitTopology_args args = new submitTopology_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      submitTopology_result result = new submitTopology_result();
      try {
        iface_.submitTopology(args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology);
      } catch (AlreadyAliveException e) {
        result.E = e;
      } catch (InvalidTopologyException ite) {
        result.Ite = ite;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("submitTopology", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void submitTopologyWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      submitTopologyWithOpts_args args = new submitTopologyWithOpts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      submitTopologyWithOpts_result result = new submitTopologyWithOpts_result();
      try {
        iface_.submitTopologyWithOpts(args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology, args.Options);
      } catch (AlreadyAliveException e) {
        result.E = e;
      } catch (InvalidTopologyException ite) {
        result.Ite = ite;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("submitTopologyWithOpts", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void killTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      killTopology_args args = new killTopology_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      killTopology_result result = new killTopology_result();
      try {
        iface_.killTopology(args.Name);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("killTopology", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void killTopologyWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      killTopologyWithOpts_args args = new killTopologyWithOpts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      killTopologyWithOpts_result result = new killTopologyWithOpts_result();
      try {
        iface_.killTopologyWithOpts(args.Name, args.Options);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("killTopologyWithOpts", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void activate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      activate_args args = new activate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      activate_result result = new activate_result();
      try {
        iface_.activate(args.Name);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("activate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deactivate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deactivate_args args = new deactivate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deactivate_result result = new deactivate_result();
      try {
        iface_.deactivate(args.Name);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("deactivate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rebalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rebalance_args args = new rebalance_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rebalance_result result = new rebalance_result();
      try {
        iface_.rebalance(args.Name, args.Options);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (InvalidTopologyException ite) {
        result.Ite = ite;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("rebalance", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void uploadNewCredentials_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      uploadNewCredentials_args args = new uploadNewCredentials_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      uploadNewCredentials_result result = new uploadNewCredentials_result();
      try {
        iface_.uploadNewCredentials(args.Name, args.Creds);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (InvalidTopologyException ite) {
        result.Ite = ite;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("uploadNewCredentials", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void beginFileUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      beginFileUpload_args args = new beginFileUpload_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      beginFileUpload_result result = new beginFileUpload_result();
      try {
        result.Success = iface_.beginFileUpload();
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("beginFileUpload", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void uploadChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      uploadChunk_args args = new uploadChunk_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      uploadChunk_result result = new uploadChunk_result();
      try {
        iface_.uploadChunk(args.Location, args.Chunk);
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("uploadChunk", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void finishFileUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      finishFileUpload_args args = new finishFileUpload_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      finishFileUpload_result result = new finishFileUpload_result();
      try {
        iface_.finishFileUpload(args.Location);
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("finishFileUpload", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void beginFileDownload_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      beginFileDownload_args args = new beginFileDownload_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      beginFileDownload_result result = new beginFileDownload_result();
      try {
        result.Success = iface_.beginFileDownload(args.File);
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("beginFileDownload", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void downloadChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      downloadChunk_args args = new downloadChunk_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      downloadChunk_result result = new downloadChunk_result();
      try {
        result.Success = iface_.downloadChunk(args.Id);
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("downloadChunk", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNimbusConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNimbusConf_args args = new getNimbusConf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNimbusConf_result result = new getNimbusConf_result();
      try {
        result.Success = iface_.getNimbusConf();
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getNimbusConf", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getClusterInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getClusterInfo_args args = new getClusterInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getClusterInfo_result result = new getClusterInfo_result();
      try {
        result.Success = iface_.getClusterInfo();
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTopologyInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTopologyInfo_args args = new getTopologyInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTopologyInfo_result result = new getTopologyInfo_result();
      try {
        result.Success = iface_.getTopologyInfo(args.Id);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getTopologyInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTopologyInfoWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTopologyInfoWithOpts_args args = new getTopologyInfoWithOpts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTopologyInfoWithOpts_result result = new getTopologyInfoWithOpts_result();
      try {
        result.Success = iface_.getTopologyInfoWithOpts(args.Id, args.Options);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getTopologyInfoWithOpts", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTopologyConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTopologyConf_args args = new getTopologyConf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTopologyConf_result result = new getTopologyConf_result();
      try {
        result.Success = iface_.getTopologyConf(args.Id);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getTopologyConf", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTopology_args args = new getTopology_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTopology_result result = new getTopology_result();
      try {
        result.Success = iface_.getTopology(args.Id);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getTopology", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserTopology_args args = new getUserTopology_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserTopology_result result = new getUserTopology_result();
      try {
        result.Success = iface_.getUserTopology(args.Id);
      } catch (NotAliveException e) {
        result.E = e;
      } catch (AuthorizationException aze) {
        result.Aze = aze;
      }
      oprot.WriteMessageBegin(new TMessage("getUserTopology", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class submitTopology_args : TBase
  {
    private string _name;
    private string _uploadedJarLocation;
    private string _jsonConf;
    private StormTopology _topology;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string UploadedJarLocation
    {
      get
      {
        return _uploadedJarLocation;
      }
      set
      {
        __isset.uploadedJarLocation = true;
        this._uploadedJarLocation = value;
      }
    }

    public string JsonConf
    {
      get
      {
        return _jsonConf;
      }
      set
      {
        __isset.jsonConf = true;
        this._jsonConf = value;
      }
    }

    public StormTopology Topology
    {
      get
      {
        return _topology;
      }
      set
      {
        __isset.topology = true;
        this._topology = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool uploadedJarLocation;
      public bool jsonConf;
      public bool topology;
    }

    public submitTopology_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UploadedJarLocation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              JsonConf = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Topology = new StormTopology();
              Topology.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("submitTopology_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
        field.Name = "uploadedJarLocation";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UploadedJarLocation);
        oprot.WriteFieldEnd();
      }
      if (JsonConf != null && __isset.jsonConf) {
        field.Name = "jsonConf";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JsonConf);
        oprot.WriteFieldEnd();
      }
      if (Topology != null && __isset.topology) {
        field.Name = "topology";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Topology.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("submitTopology_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UploadedJarLocation: ");
        __sb.Append(UploadedJarLocation);
      }
      if (JsonConf != null && __isset.jsonConf) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JsonConf: ");
        __sb.Append(JsonConf);
      }
      if (Topology != null && __isset.topology) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Topology: ");
        __sb.Append(Topology== null ? "<null>" : Topology.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class submitTopology_result : TBase
  {
    private AlreadyAliveException _e;
    private InvalidTopologyException _ite;
    private AuthorizationException _aze;

    public AlreadyAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public InvalidTopologyException Ite
    {
      get
      {
        return _ite;
      }
      set
      {
        __isset.ite = true;
        this._ite = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ite;
      public bool aze;
    }

    public submitTopology_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new AlreadyAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ite = new InvalidTopologyException();
              Ite.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("submitTopology_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ite) {
        if (Ite != null) {
          field.Name = "Ite";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ite.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("submitTopology_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ite != null && __isset.ite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ite: ");
        __sb.Append(Ite== null ? "<null>" : Ite.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class submitTopologyWithOpts_args : TBase
  {
    private string _name;
    private string _uploadedJarLocation;
    private string _jsonConf;
    private StormTopology _topology;
    private SubmitOptions _options;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string UploadedJarLocation
    {
      get
      {
        return _uploadedJarLocation;
      }
      set
      {
        __isset.uploadedJarLocation = true;
        this._uploadedJarLocation = value;
      }
    }

    public string JsonConf
    {
      get
      {
        return _jsonConf;
      }
      set
      {
        __isset.jsonConf = true;
        this._jsonConf = value;
      }
    }

    public StormTopology Topology
    {
      get
      {
        return _topology;
      }
      set
      {
        __isset.topology = true;
        this._topology = value;
      }
    }

    public SubmitOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool uploadedJarLocation;
      public bool jsonConf;
      public bool topology;
      public bool options;
    }

    public submitTopologyWithOpts_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UploadedJarLocation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              JsonConf = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Topology = new StormTopology();
              Topology.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Options = new SubmitOptions();
              Options.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("submitTopologyWithOpts_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
        field.Name = "uploadedJarLocation";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UploadedJarLocation);
        oprot.WriteFieldEnd();
      }
      if (JsonConf != null && __isset.jsonConf) {
        field.Name = "jsonConf";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JsonConf);
        oprot.WriteFieldEnd();
      }
      if (Topology != null && __isset.topology) {
        field.Name = "topology";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Topology.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Options != null && __isset.options) {
        field.Name = "options";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Options.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("submitTopologyWithOpts_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UploadedJarLocation: ");
        __sb.Append(UploadedJarLocation);
      }
      if (JsonConf != null && __isset.jsonConf) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JsonConf: ");
        __sb.Append(JsonConf);
      }
      if (Topology != null && __isset.topology) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Topology: ");
        __sb.Append(Topology== null ? "<null>" : Topology.ToString());
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class submitTopologyWithOpts_result : TBase
  {
    private AlreadyAliveException _e;
    private InvalidTopologyException _ite;
    private AuthorizationException _aze;

    public AlreadyAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public InvalidTopologyException Ite
    {
      get
      {
        return _ite;
      }
      set
      {
        __isset.ite = true;
        this._ite = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ite;
      public bool aze;
    }

    public submitTopologyWithOpts_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new AlreadyAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ite = new InvalidTopologyException();
              Ite.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("submitTopologyWithOpts_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ite) {
        if (Ite != null) {
          field.Name = "Ite";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ite.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("submitTopologyWithOpts_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ite != null && __isset.ite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ite: ");
        __sb.Append(Ite== null ? "<null>" : Ite.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class killTopology_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public killTopology_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("killTopology_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("killTopology_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class killTopology_result : TBase
  {
    private NotAliveException _e;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool aze;
    }

    public killTopology_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("killTopology_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("killTopology_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class killTopologyWithOpts_args : TBase
  {
    private string _name;
    private KillOptions _options;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public KillOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool options;
    }

    public killTopologyWithOpts_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Options = new KillOptions();
              Options.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("killTopologyWithOpts_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Options != null && __isset.options) {
        field.Name = "options";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Options.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("killTopologyWithOpts_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class killTopologyWithOpts_result : TBase
  {
    private NotAliveException _e;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool aze;
    }

    public killTopologyWithOpts_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("killTopologyWithOpts_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("killTopologyWithOpts_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activate_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public activate_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("activate_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activate_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activate_result : TBase
  {
    private NotAliveException _e;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool aze;
    }

    public activate_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("activate_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activate_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deactivate_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public deactivate_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deactivate_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deactivate_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deactivate_result : TBase
  {
    private NotAliveException _e;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool aze;
    }

    public deactivate_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deactivate_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deactivate_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rebalance_args : TBase
  {
    private string _name;
    private RebalanceOptions _options;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public RebalanceOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool options;
    }

    public rebalance_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Options = new RebalanceOptions();
              Options.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("rebalance_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Options != null && __isset.options) {
        field.Name = "options";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Options.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rebalance_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rebalance_result : TBase
  {
    private NotAliveException _e;
    private InvalidTopologyException _ite;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public InvalidTopologyException Ite
    {
      get
      {
        return _ite;
      }
      set
      {
        __isset.ite = true;
        this._ite = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ite;
      public bool aze;
    }

    public rebalance_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ite = new InvalidTopologyException();
              Ite.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("rebalance_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ite) {
        if (Ite != null) {
          field.Name = "Ite";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ite.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rebalance_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ite != null && __isset.ite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ite: ");
        __sb.Append(Ite== null ? "<null>" : Ite.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadNewCredentials_args : TBase
  {
    private string _name;
    private Credentials _creds;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public Credentials Creds
    {
      get
      {
        return _creds;
      }
      set
      {
        __isset.creds = true;
        this._creds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool creds;
    }

    public uploadNewCredentials_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Creds = new Credentials();
              Creds.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("uploadNewCredentials_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Creds != null && __isset.creds) {
        field.Name = "creds";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Creds.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadNewCredentials_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Creds != null && __isset.creds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Creds: ");
        __sb.Append(Creds== null ? "<null>" : Creds.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadNewCredentials_result : TBase
  {
    private NotAliveException _e;
    private InvalidTopologyException _ite;
    private AuthorizationException _aze;

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public InvalidTopologyException Ite
    {
      get
      {
        return _ite;
      }
      set
      {
        __isset.ite = true;
        this._ite = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ite;
      public bool aze;
    }

    public uploadNewCredentials_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ite = new InvalidTopologyException();
              Ite.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("uploadNewCredentials_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ite) {
        if (Ite != null) {
          field.Name = "Ite";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ite.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadNewCredentials_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ite != null && __isset.ite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ite: ");
        __sb.Append(Ite== null ? "<null>" : Ite.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginFileUpload_args : TBase
  {

    public beginFileUpload_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("beginFileUpload_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginFileUpload_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginFileUpload_result : TBase
  {
    private string _success;
    private AuthorizationException _aze;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool aze;
    }

    public beginFileUpload_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("beginFileUpload_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginFileUpload_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadChunk_args : TBase
  {
    private string _location;
    private byte[] _chunk;

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public byte[] Chunk
    {
      get
      {
        return _chunk;
      }
      set
      {
        __isset.chunk = true;
        this._chunk = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool location;
      public bool chunk;
    }

    public uploadChunk_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Chunk = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("uploadChunk_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (Chunk != null && __isset.chunk) {
        field.Name = "chunk";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Chunk);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadChunk_args(");
      bool __first = true;
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (Chunk != null && __isset.chunk) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Chunk: ");
        __sb.Append(Chunk);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadChunk_result : TBase
  {
    private AuthorizationException _aze;

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool aze;
    }

    public uploadChunk_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("uploadChunk_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadChunk_result(");
      bool __first = true;
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class finishFileUpload_args : TBase
  {
    private string _location;

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool location;
    }

    public finishFileUpload_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("finishFileUpload_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("finishFileUpload_args(");
      bool __first = true;
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class finishFileUpload_result : TBase
  {
    private AuthorizationException _aze;

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool aze;
    }

    public finishFileUpload_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("finishFileUpload_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("finishFileUpload_result(");
      bool __first = true;
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginFileDownload_args : TBase
  {
    private string _file;

    public string File
    {
      get
      {
        return _file;
      }
      set
      {
        __isset.file = true;
        this._file = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool file;
    }

    public beginFileDownload_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              File = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("beginFileDownload_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (File != null && __isset.file) {
        field.Name = "file";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(File);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginFileDownload_args(");
      bool __first = true;
      if (File != null && __isset.file) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("File: ");
        __sb.Append(File);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginFileDownload_result : TBase
  {
    private string _success;
    private AuthorizationException _aze;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool aze;
    }

    public beginFileDownload_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("beginFileDownload_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginFileDownload_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class downloadChunk_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public downloadChunk_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("downloadChunk_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("downloadChunk_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class downloadChunk_result : TBase
  {
    private byte[] _success;
    private AuthorizationException _aze;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool aze;
    }

    public downloadChunk_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("downloadChunk_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("downloadChunk_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNimbusConf_args : TBase
  {

    public getNimbusConf_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getNimbusConf_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNimbusConf_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNimbusConf_result : TBase
  {
    private string _success;
    private AuthorizationException _aze;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool aze;
    }

    public getNimbusConf_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getNimbusConf_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNimbusConf_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterInfo_args : TBase
  {

    public getClusterInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getClusterInfo_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterInfo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterInfo_result : TBase
  {
    private ClusterSummary _success;
    private AuthorizationException _aze;

    public ClusterSummary Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool aze;
    }

    public getClusterInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new ClusterSummary();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getClusterInfo_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyInfo_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getTopologyInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyInfo_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyInfo_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyInfo_result : TBase
  {
    private TopologyInfo _success;
    private NotAliveException _e;
    private AuthorizationException _aze;

    public TopologyInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool aze;
    }

    public getTopologyInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TopologyInfo();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyInfo_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyInfoWithOpts_args : TBase
  {
    private string _id;
    private GetInfoOptions _options;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public GetInfoOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool options;
    }

    public getTopologyInfoWithOpts_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Options = new GetInfoOptions();
              Options.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyInfoWithOpts_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Options != null && __isset.options) {
        field.Name = "options";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Options.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyInfoWithOpts_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyInfoWithOpts_result : TBase
  {
    private TopologyInfo _success;
    private NotAliveException _e;
    private AuthorizationException _aze;

    public TopologyInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool aze;
    }

    public getTopologyInfoWithOpts_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TopologyInfo();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyInfoWithOpts_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyInfoWithOpts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyConf_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getTopologyConf_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyConf_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyConf_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopologyConf_result : TBase
  {
    private string _success;
    private NotAliveException _e;
    private AuthorizationException _aze;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool aze;
    }

    public getTopologyConf_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopologyConf_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopologyConf_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopology_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getTopology_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopology_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopology_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTopology_result : TBase
  {
    private StormTopology _success;
    private NotAliveException _e;
    private AuthorizationException _aze;

    public StormTopology Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool aze;
    }

    public getTopology_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new StormTopology();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getTopology_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTopology_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTopology_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getUserTopology_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getUserTopology_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTopology_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTopology_result : TBase
  {
    private StormTopology _success;
    private NotAliveException _e;
    private AuthorizationException _aze;

    public StormTopology Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public NotAliveException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public AuthorizationException Aze
    {
      get
      {
        return _aze;
      }
      set
      {
        __isset.aze = true;
        this._aze = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool aze;
    }

    public getUserTopology_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new StormTopology();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              E = new NotAliveException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Aze = new AuthorizationException();
              Aze.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getUserTopology_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.aze) {
        if (Aze != null) {
          field.Name = "Aze";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Aze.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTopology_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Aze != null && __isset.aze) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aze: ");
        __sb.Append(Aze== null ? "<null>" : Aze.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
