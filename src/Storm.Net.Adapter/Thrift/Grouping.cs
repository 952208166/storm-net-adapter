#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class Grouping : TBase
{
  private List<string> _fields;
  private NullStruct _shuffle;
  private NullStruct _all;
  private NullStruct _none;
  private NullStruct _direct;
  private JavaObject _custom_object;
  private byte[] _custom_serialized;
  private NullStruct _local_or_shuffle;

  public List<string> Fields
  {
    get
    {
      return _fields;
    }
    set
    {
      __isset.fields = true;
      this._fields = value;
    }
  }

  public NullStruct Shuffle
  {
    get
    {
      return _shuffle;
    }
    set
    {
      __isset.shuffle = true;
      this._shuffle = value;
    }
  }

  public NullStruct All
  {
    get
    {
      return _all;
    }
    set
    {
      __isset.all = true;
      this._all = value;
    }
  }

  public NullStruct None
  {
    get
    {
      return _none;
    }
    set
    {
      __isset.none = true;
      this._none = value;
    }
  }

  public NullStruct Direct
  {
    get
    {
      return _direct;
    }
    set
    {
      __isset.direct = true;
      this._direct = value;
    }
  }

  public JavaObject Custom_object
  {
    get
    {
      return _custom_object;
    }
    set
    {
      __isset.custom_object = true;
      this._custom_object = value;
    }
  }

  public byte[] Custom_serialized
  {
    get
    {
      return _custom_serialized;
    }
    set
    {
      __isset.custom_serialized = true;
      this._custom_serialized = value;
    }
  }

  public NullStruct Local_or_shuffle
  {
    get
    {
      return _local_or_shuffle;
    }
    set
    {
      __isset.local_or_shuffle = true;
      this._local_or_shuffle = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool fields;
    public bool shuffle;
    public bool all;
    public bool none;
    public bool direct;
    public bool custom_object;
    public bool custom_serialized;
    public bool local_or_shuffle;
  }

  public Grouping() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.List) {
            {
              Fields = new List<string>();
              TList _list4 = iprot.ReadListBegin();
              for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
              {
                string _elem6;
                _elem6 = iprot.ReadString();
                Fields.Add(_elem6);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Struct) {
            Shuffle = new NullStruct();
            Shuffle.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Struct) {
            All = new NullStruct();
            All.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Struct) {
            None = new NullStruct();
            None.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.Struct) {
            Direct = new NullStruct();
            Direct.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.Struct) {
            Custom_object = new JavaObject();
            Custom_object.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.String) {
            Custom_serialized = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 8:
          if (field.Type == TType.Struct) {
            Local_or_shuffle = new NullStruct();
            Local_or_shuffle.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("Grouping");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Fields != null && __isset.fields) {
      field.Name = "fields";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Fields.Count));
        foreach (string _iter7 in Fields)
        {
          oprot.WriteString(_iter7);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (Shuffle != null && __isset.shuffle) {
      field.Name = "shuffle";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Shuffle.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (All != null && __isset.all) {
      field.Name = "all";
      field.Type = TType.Struct;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      All.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (None != null && __isset.none) {
      field.Name = "none";
      field.Type = TType.Struct;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      None.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (Direct != null && __isset.direct) {
      field.Name = "direct";
      field.Type = TType.Struct;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      Direct.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (Custom_object != null && __isset.custom_object) {
      field.Name = "custom_object";
      field.Type = TType.Struct;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      Custom_object.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (Custom_serialized != null && __isset.custom_serialized) {
      field.Name = "custom_serialized";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Custom_serialized);
      oprot.WriteFieldEnd();
    }
    if (Local_or_shuffle != null && __isset.local_or_shuffle) {
      field.Name = "local_or_shuffle";
      field.Type = TType.Struct;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      Local_or_shuffle.Write(oprot);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Grouping(");
    bool __first = true;
    if (Fields != null && __isset.fields) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Fields: ");
      __sb.Append(Fields);
    }
    if (Shuffle != null && __isset.shuffle) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Shuffle: ");
      __sb.Append(Shuffle== null ? "<null>" : Shuffle.ToString());
    }
    if (All != null && __isset.all) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("All: ");
      __sb.Append(All== null ? "<null>" : All.ToString());
    }
    if (None != null && __isset.none) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("None: ");
      __sb.Append(None== null ? "<null>" : None.ToString());
    }
    if (Direct != null && __isset.direct) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Direct: ");
      __sb.Append(Direct== null ? "<null>" : Direct.ToString());
    }
    if (Custom_object != null && __isset.custom_object) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Custom_object: ");
      __sb.Append(Custom_object== null ? "<null>" : Custom_object.ToString());
    }
    if (Custom_serialized != null && __isset.custom_serialized) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Custom_serialized: ");
      __sb.Append(Custom_serialized);
    }
    if (Local_or_shuffle != null && __isset.local_or_shuffle) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Local_or_shuffle: ");
      __sb.Append(Local_or_shuffle== null ? "<null>" : Local_or_shuffle.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif