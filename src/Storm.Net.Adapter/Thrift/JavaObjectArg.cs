#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class JavaObjectArg : TBase
{
  private int _int_arg;
  private long _long_arg;
  private string _string_arg;
  private bool _bool_arg;
  private byte[] _binary_arg;
  private double _double_arg;

  public int Int_arg
  {
    get
    {
      return _int_arg;
    }
    set
    {
      __isset.int_arg = true;
      this._int_arg = value;
    }
  }

  public long Long_arg
  {
    get
    {
      return _long_arg;
    }
    set
    {
      __isset.long_arg = true;
      this._long_arg = value;
    }
  }

  public string String_arg
  {
    get
    {
      return _string_arg;
    }
    set
    {
      __isset.string_arg = true;
      this._string_arg = value;
    }
  }

  public bool Bool_arg
  {
    get
    {
      return _bool_arg;
    }
    set
    {
      __isset.bool_arg = true;
      this._bool_arg = value;
    }
  }

  public byte[] Binary_arg
  {
    get
    {
      return _binary_arg;
    }
    set
    {
      __isset.binary_arg = true;
      this._binary_arg = value;
    }
  }

  public double Double_arg
  {
    get
    {
      return _double_arg;
    }
    set
    {
      __isset.double_arg = true;
      this._double_arg = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool int_arg;
    public bool long_arg;
    public bool string_arg;
    public bool bool_arg;
    public bool binary_arg;
    public bool double_arg;
  }

  public JavaObjectArg() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            Int_arg = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I64) {
            Long_arg = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            String_arg = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Bool) {
            Bool_arg = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            Binary_arg = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.Double) {
            Double_arg = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("JavaObjectArg");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.int_arg) {
      field.Name = "int_arg";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Int_arg);
      oprot.WriteFieldEnd();
    }
    if (__isset.long_arg) {
      field.Name = "long_arg";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Long_arg);
      oprot.WriteFieldEnd();
    }
    if (String_arg != null && __isset.string_arg) {
      field.Name = "string_arg";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(String_arg);
      oprot.WriteFieldEnd();
    }
    if (__isset.bool_arg) {
      field.Name = "bool_arg";
      field.Type = TType.Bool;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Bool_arg);
      oprot.WriteFieldEnd();
    }
    if (Binary_arg != null && __isset.binary_arg) {
      field.Name = "binary_arg";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Binary_arg);
      oprot.WriteFieldEnd();
    }
    if (__isset.double_arg) {
      field.Name = "double_arg";
      field.Type = TType.Double;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Double_arg);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("JavaObjectArg(");
    bool __first = true;
    if (__isset.int_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Int_arg: ");
      __sb.Append(Int_arg);
    }
    if (__isset.long_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Long_arg: ");
      __sb.Append(Long_arg);
    }
    if (String_arg != null && __isset.string_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("String_arg: ");
      __sb.Append(String_arg);
    }
    if (__isset.bool_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Bool_arg: ");
      __sb.Append(Bool_arg);
    }
    if (Binary_arg != null && __isset.binary_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Binary_arg: ");
      __sb.Append(Binary_arg);
    }
    if (__isset.double_arg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Double_arg: ");
      __sb.Append(Double_arg);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif