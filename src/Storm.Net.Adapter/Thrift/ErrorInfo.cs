#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;



public partial class ErrorInfo : TBase
{
  private string _host;
  private int _port;

  public string Error { get; set; }

  public int Error_time_secs { get; set; }

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public int Port
  {
    get
    {
      return _port;
    }
    set
    {
      __isset.port = true;
      this._port = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool host;
    public bool port;
  }

  public ErrorInfo() {
  }

  public ErrorInfo(string error, int error_time_secs) : this() {
    this.Error = error;
    this.Error_time_secs = error_time_secs;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_error = false;
    bool isset_error_time_secs = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Error = iprot.ReadString();
            isset_error = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            Error_time_secs = iprot.ReadI32();
            isset_error_time_secs = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            Host = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Port = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_error)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_error_time_secs)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ErrorInfo");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "error";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Error);
    oprot.WriteFieldEnd();
    field.Name = "error_time_secs";
    field.Type = TType.I32;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Error_time_secs);
    oprot.WriteFieldEnd();
    if (Host != null && __isset.host) {
      field.Name = "host";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Host);
      oprot.WriteFieldEnd();
    }
    if (__isset.port) {
      field.Name = "port";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Port);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ErrorInfo(");
    __sb.Append(", Error: ");
    __sb.Append(Error);
    __sb.Append(", Error_time_secs: ");
    __sb.Append(Error_time_secs);
    if (Host != null && __isset.host) {
      __sb.Append(", Host: ");
      __sb.Append(Host);
    }
    if (__isset.port) {
      __sb.Append(", Port: ");
      __sb.Append(Port);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif