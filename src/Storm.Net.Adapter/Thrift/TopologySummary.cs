#if !NETSTANDARD13
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TopologySummary : TBase
{
  private string _sched_status;
  private string _owner;

  public string Id { get; set; }

  public string Name { get; set; }

  public int Num_tasks { get; set; }

  public int Num_executors { get; set; }

  public int Num_workers { get; set; }

  public int Uptime_secs { get; set; }

  public string Status { get; set; }

  public string Sched_status
  {
    get
    {
      return _sched_status;
    }
    set
    {
      __isset.sched_status = true;
      this._sched_status = value;
    }
  }

  public string Owner
  {
    get
    {
      return _owner;
    }
    set
    {
      __isset.owner = true;
      this._owner = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sched_status;
    public bool owner;
  }

  public TopologySummary() {
  }

  public TopologySummary(string id, string name, int num_tasks, int num_executors, int num_workers, int uptime_secs, string status) : this() {
    this.Id = id;
    this.Name = name;
    this.Num_tasks = num_tasks;
    this.Num_executors = num_executors;
    this.Num_workers = num_workers;
    this.Uptime_secs = uptime_secs;
    this.Status = status;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_id = false;
    bool isset_name = false;
    bool isset_num_tasks = false;
    bool isset_num_executors = false;
    bool isset_num_workers = false;
    bool isset_uptime_secs = false;
    bool isset_status = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Id = iprot.ReadString();
            isset_id = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Name = iprot.ReadString();
            isset_name = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            Num_tasks = iprot.ReadI32();
            isset_num_tasks = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Num_executors = iprot.ReadI32();
            isset_num_executors = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.I32) {
            Num_workers = iprot.ReadI32();
            isset_num_workers = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.I32) {
            Uptime_secs = iprot.ReadI32();
            isset_uptime_secs = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.String) {
            Status = iprot.ReadString();
            isset_status = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 513:
          if (field.Type == TType.String) {
            Sched_status = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 514:
          if (field.Type == TType.String) {
            Owner = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_id)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_name)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_tasks)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_executors)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_num_workers)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_uptime_secs)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_status)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("TopologySummary");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "id";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Id);
    oprot.WriteFieldEnd();
    field.Name = "name";
    field.Type = TType.String;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Name);
    oprot.WriteFieldEnd();
    field.Name = "num_tasks";
    field.Type = TType.I32;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_tasks);
    oprot.WriteFieldEnd();
    field.Name = "num_executors";
    field.Type = TType.I32;
    field.ID = 4;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_executors);
    oprot.WriteFieldEnd();
    field.Name = "num_workers";
    field.Type = TType.I32;
    field.ID = 5;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Num_workers);
    oprot.WriteFieldEnd();
    field.Name = "uptime_secs";
    field.Type = TType.I32;
    field.ID = 6;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(Uptime_secs);
    oprot.WriteFieldEnd();
    field.Name = "status";
    field.Type = TType.String;
    field.ID = 7;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(Status);
    oprot.WriteFieldEnd();
    if (Sched_status != null && __isset.sched_status) {
      field.Name = "sched_status";
      field.Type = TType.String;
      field.ID = 513;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Sched_status);
      oprot.WriteFieldEnd();
    }
    if (Owner != null && __isset.owner) {
      field.Name = "owner";
      field.Type = TType.String;
      field.ID = 514;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Owner);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TopologySummary(");
    __sb.Append(", Id: ");
    __sb.Append(Id);
    __sb.Append(", Name: ");
    __sb.Append(Name);
    __sb.Append(", Num_tasks: ");
    __sb.Append(Num_tasks);
    __sb.Append(", Num_executors: ");
    __sb.Append(Num_executors);
    __sb.Append(", Num_workers: ");
    __sb.Append(Num_workers);
    __sb.Append(", Uptime_secs: ");
    __sb.Append(Uptime_secs);
    __sb.Append(", Status: ");
    __sb.Append(Status);
    if (Sched_status != null && __isset.sched_status) {
      __sb.Append(", Sched_status: ");
      __sb.Append(Sched_status);
    }
    if (Owner != null && __isset.owner) {
      __sb.Append(", Owner: ");
      __sb.Append(Owner);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif