/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Credentials : TBase
{

  public Dictionary<string, string> Creds { get; set; }

  public Credentials() {
  }

  public Credentials(Dictionary<string, string> creds) : this() {
    this.Creds = creds;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_creds = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Map) {
            {
              Creds = new Dictionary<string, string>();
              TMap _map163 = iprot.ReadMapBegin();
              for( int _i164 = 0; _i164 < _map163.Count; ++_i164)
              {
                string _key165;
                string _val166;
                _key165 = iprot.ReadString();
                _val166 = iprot.ReadString();
                Creds[_key165] = _val166;
              }
              iprot.ReadMapEnd();
            }
            isset_creds = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_creds)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("Credentials");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "creds";
    field.Type = TType.Map;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteMapBegin(new TMap(TType.String, TType.String, Creds.Count));
      foreach (string _iter167 in Creds.Keys)
      {
        oprot.WriteString(_iter167);
        oprot.WriteString(Creds[_iter167]);
      }
      oprot.WriteMapEnd();
    }
    oprot.WriteFieldEnd();
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Credentials(");
    __sb.Append(", Creds: ");
    __sb.Append(Creds);
    __sb.Append(")");
    return __sb.ToString();
  }

}

